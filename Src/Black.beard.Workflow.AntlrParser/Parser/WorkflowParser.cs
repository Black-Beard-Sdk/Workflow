//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from WorkflowParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Workflows.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class WorkflowParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACTION=1, AFTER=2, AND=3, BEFORE=4, CONST=5, CONCURENCY=6, DESCRIPTION=7, 
		DAY=8, DEFINE=9, DECIMAL=10, EVENT=11, EXECUTE=12, ENTER=13, EQUAL=14, 
		EXIT=15, EXPIRE=16, FRAGMENT=17, HOUR=18, INCLUDE=19, INITIALIZE=20, INTEGER=21, 
		MATCHING=22, MINUTE=23, NAME=24, NO=25, NOT=26, ON=27, OR=28, PARAMETER=29, 
		RULE=30, SWITCH=31, STATE=32, STORE=33, TEXT=34, TIME=35, VERSION=36, 
		WAITING=37, WITH=38, WHEN=39, WORKFLOW=40, CHAR_STRING=41, LEFT_PAREN=42, 
		RIGHT_PAREN=43, SEMICOLON=44, COLON=45, COMMA=46, DOT=47, AROBASE=48, 
		SPACES=49, NUMBER=50, SINGLE_LINE_COMMENT=51, MULTI_LINE_COMMENT=52, REGULAR_ID=53;
	public const int
		RULE_script = 0, RULE_script_fragment = 1, RULE_script_full = 2, RULE_concurency = 3, 
		RULE_define_referenciel_statement = 4, RULE_define_state_statement = 5, 
		RULE_constant_declaration = 6, RULE_value = 7, RULE_state = 8, RULE_initializing = 9, 
		RULE_initializing_item = 10, RULE_on_event_statement = 11, RULE_switch_state = 12, 
		RULE_execute = 13, RULE_execute2 = 14, RULE_execute3 = 15, RULE_matchings = 16, 
		RULE_matching = 17, RULE_action = 18, RULE_arguments = 19, RULE_argument = 20, 
		RULE_argumentValue = 21, RULE_rule_conditions = 22, RULE_event_declaration_statement = 23, 
		RULE_action_declaration_statement = 24, RULE_rule_declaration_statement = 25, 
		RULE_parameters = 26, RULE_parameter = 27, RULE_type = 28, RULE_key = 29, 
		RULE_compositekey = 30, RULE_comment = 31, RULE_number = 32, RULE_numeric = 33, 
		RULE_string = 34, RULE_delay = 35;
	public static readonly string[] ruleNames = {
		"script", "script_fragment", "script_full", "concurency", "define_referenciel_statement", 
		"define_state_statement", "constant_declaration", "value", "state", "initializing", 
		"initializing_item", "on_event_statement", "switch_state", "execute", 
		"execute2", "execute3", "matchings", "matching", "action", "arguments", 
		"argument", "argumentValue", "rule_conditions", "event_declaration_statement", 
		"action_declaration_statement", "rule_declaration_statement", "parameters", 
		"parameter", "type", "key", "compositekey", "comment", "number", "numeric", 
		"string", "delay"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ACTION'", "'AFTER'", "'AND'", "'BEFORE'", "'CONST'", "'CONCURENCY'", 
		"'DESCRIPTION'", "'DAY'", "'DEFINE'", "'DECIMAL'", "'EVENT'", "'EXECUTE'", 
		"'ENTER'", "'='", "'EXIT'", "'EXPIRE'", "'FRAGMENT'", "'HOUR'", "'INCLUDE'", 
		"'INITIALIZE'", "'INTEGER'", "'MATCHING'", "'MINUTE'", "'NAME'", "'NO'", 
		"'NOT'", "'ON'", "'OR'", "'PARAMETER'", "'RULE'", "'SWITCH'", "'STATE'", 
		"'STORE'", "'TEXT'", "'TIME'", "'VERSION'", "'WAITING'", "'WITH'", "'WHEN'", 
		"'WORKFLOW'", null, "'('", "')'", "';'", "':'", "','", "'.'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACTION", "AFTER", "AND", "BEFORE", "CONST", "CONCURENCY", "DESCRIPTION", 
		"DAY", "DEFINE", "DECIMAL", "EVENT", "EXECUTE", "ENTER", "EQUAL", "EXIT", 
		"EXPIRE", "FRAGMENT", "HOUR", "INCLUDE", "INITIALIZE", "INTEGER", "MATCHING", 
		"MINUTE", "NAME", "NO", "NOT", "ON", "OR", "PARAMETER", "RULE", "SWITCH", 
		"STATE", "STORE", "TEXT", "TIME", "VERSION", "WAITING", "WITH", "WHEN", 
		"WORKFLOW", "CHAR_STRING", "LEFT_PAREN", "RIGHT_PAREN", "SEMICOLON", "COLON", 
		"COMMA", "DOT", "AROBASE", "SPACES", "NUMBER", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT", "REGULAR_ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WorkflowParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static WorkflowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WorkflowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WorkflowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public Script_fragmentContext script_fragment() {
			return GetRuleContext<Script_fragmentContext>(0);
		}
		public Script_fullContext script_full() {
			return GetRuleContext<Script_fullContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(WorkflowParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FRAGMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; script_fragment();
				}
				break;
			case INCLUDE:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; script_full();
				State = 74; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Script_fragmentContext : ParserRuleContext {
		public ITerminalNode FRAGMENT() { return GetToken(WorkflowParser.FRAGMENT, 0); }
		public ITerminalNode NAME() { return GetToken(WorkflowParser.NAME, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode DESCRIPTION() { return GetToken(WorkflowParser.DESCRIPTION, 0); }
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Define_referenciel_statementContext[] define_referenciel_statement() {
			return GetRuleContexts<Define_referenciel_statementContext>();
		}
		public Define_referenciel_statementContext define_referenciel_statement(int i) {
			return GetRuleContext<Define_referenciel_statementContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(WorkflowParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(WorkflowParser.SEMICOLON, i);
		}
		public Script_fragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script_fragment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript_fragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Script_fragmentContext script_fragment() {
		Script_fragmentContext _localctx = new Script_fragmentContext(Context, State);
		EnterRule(_localctx, 2, RULE_script_fragment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(FRAGMENT);
			State = 79; Match(NAME);
			State = 80; key();
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESCRIPTION) {
				{
				State = 81; Match(DESCRIPTION);
				State = 82; comment();
				}
			}

			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 85; define_referenciel_statement();
				State = 86; Match(SEMICOLON);
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DEFINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Script_fullContext : ParserRuleContext {
		public NumberContext versionNumber;
		public ITerminalNode NAME() { return GetToken(WorkflowParser.NAME, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode[] INCLUDE() { return GetTokens(WorkflowParser.INCLUDE); }
		public ITerminalNode INCLUDE(int i) {
			return GetToken(WorkflowParser.INCLUDE, i);
		}
		public ITerminalNode[] CHAR_STRING() { return GetTokens(WorkflowParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(WorkflowParser.CHAR_STRING, i);
		}
		public ITerminalNode VERSION() { return GetToken(WorkflowParser.VERSION, 0); }
		public ConcurencyContext concurency() {
			return GetRuleContext<ConcurencyContext>(0);
		}
		public ITerminalNode DESCRIPTION() { return GetToken(WorkflowParser.DESCRIPTION, 0); }
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ITerminalNode MATCHING() { return GetToken(WorkflowParser.MATCHING, 0); }
		public MatchingsContext matchings() {
			return GetRuleContext<MatchingsContext>(0);
		}
		public Define_referenciel_statementContext[] define_referenciel_statement() {
			return GetRuleContexts<Define_referenciel_statementContext>();
		}
		public Define_referenciel_statementContext define_referenciel_statement(int i) {
			return GetRuleContext<Define_referenciel_statementContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(WorkflowParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(WorkflowParser.SEMICOLON, i);
		}
		public InitializingContext initializing() {
			return GetRuleContext<InitializingContext>(0);
		}
		public Define_state_statementContext[] define_state_statement() {
			return GetRuleContexts<Define_state_statementContext>();
		}
		public Define_state_statementContext define_state_statement(int i) {
			return GetRuleContext<Define_state_statementContext>(i);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public Script_fullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script_full; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript_full(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Script_fullContext script_full() {
		Script_fullContext _localctx = new Script_fullContext(Context, State);
		EnterRule(_localctx, 4, RULE_script_full);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE) {
				{
				{
				State = 92; Match(INCLUDE);
				State = 93; Match(CHAR_STRING);
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99; Match(NAME);
			State = 100; key();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VERSION) {
				{
				State = 101; Match(VERSION);
				State = 102; _localctx.versionNumber = number();
				}
			}

			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCURENCY) {
				{
				State = 105; concurency();
				}
			}

			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESCRIPTION) {
				{
				State = 108; Match(DESCRIPTION);
				State = 109; comment();
				}
			}

			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCHING) {
				{
				State = 112; Match(MATCHING);
				State = 113; matchings();
				}
			}

			State = 119;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 116; define_referenciel_statement();
					State = 117; Match(SEMICOLON);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIALIZE) {
				{
				State = 123; initializing();
				}
			}

			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFINE) {
				{
				{
				State = 126; define_state_statement();
				State = 127; Match(SEMICOLON);
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcurencyContext : ParserRuleContext {
		public NumberContext concurencyNumber;
		public ITerminalNode CONCURENCY() { return GetToken(WorkflowParser.CONCURENCY, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ConcurencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurency; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcurency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcurencyContext concurency() {
		ConcurencyContext _localctx = new ConcurencyContext(Context, State);
		EnterRule(_localctx, 6, RULE_concurency);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 134; Match(CONCURENCY);
			State = 135; _localctx.concurencyNumber = number();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_referenciel_statementContext : ParserRuleContext {
		public ITerminalNode DEFINE() { return GetToken(WorkflowParser.DEFINE, 0); }
		public Event_declaration_statementContext event_declaration_statement() {
			return GetRuleContext<Event_declaration_statementContext>(0);
		}
		public Rule_declaration_statementContext rule_declaration_statement() {
			return GetRuleContext<Rule_declaration_statementContext>(0);
		}
		public Action_declaration_statementContext action_declaration_statement() {
			return GetRuleContext<Action_declaration_statementContext>(0);
		}
		public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		public Define_referenciel_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_referenciel_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine_referenciel_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Define_referenciel_statementContext define_referenciel_statement() {
		Define_referenciel_statementContext _localctx = new Define_referenciel_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_define_referenciel_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(DEFINE);
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENT:
				{
				State = 138; event_declaration_statement();
				}
				break;
			case RULE:
				{
				State = 139; rule_declaration_statement();
				}
				break;
			case ACTION:
				{
				State = 140; action_declaration_statement();
				}
				break;
			case CONST:
				{
				State = 141; constant_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_state_statementContext : ParserRuleContext {
		public ITerminalNode DEFINE() { return GetToken(WorkflowParser.DEFINE, 0); }
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public Define_state_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_state_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine_state_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Define_state_statementContext define_state_statement() {
		Define_state_statementContext _localctx = new Define_state_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_define_state_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(DEFINE);
			State = 145; state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(WorkflowParser.CONST, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_constant_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(CONST);
			State = 148; key();
			State = 149; value();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 150; comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public ITerminalNode REGULAR_ID() { return GetToken(WorkflowParser.REGULAR_ID, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_value);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; @string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 155; delay();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 156; Match(REGULAR_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateContext : ParserRuleContext {
		public ITerminalNode STATE() { return GetToken(WorkflowParser.STATE, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public ExecuteContext[] execute() {
			return GetRuleContexts<ExecuteContext>();
		}
		public ExecuteContext execute(int i) {
			return GetRuleContext<ExecuteContext>(i);
		}
		public On_event_statementContext[] on_event_statement() {
			return GetRuleContexts<On_event_statementContext>();
		}
		public On_event_statementContext on_event_statement(int i) {
			return GetRuleContext<On_event_statementContext>(i);
		}
		public StateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateContext state() {
		StateContext _localctx = new StateContext(Context, State);
		EnterRule(_localctx, 16, RULE_state);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(STATE);
			State = 160; key();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 161; comment();
				}
			}

			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 164; execute();
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXPIRE || _la==ON) {
				{
				{
				State = 170; on_event_statement();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializingContext : ParserRuleContext {
		public ITerminalNode INITIALIZE() { return GetToken(WorkflowParser.INITIALIZE, 0); }
		public ITerminalNode WORKFLOW() { return GetToken(WorkflowParser.WORKFLOW, 0); }
		public Initializing_itemContext[] initializing_item() {
			return GetRuleContexts<Initializing_itemContext>();
		}
		public Initializing_itemContext initializing_item(int i) {
			return GetRuleContext<Initializing_itemContext>(i);
		}
		public InitializingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializing; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializingContext initializing() {
		InitializingContext _localctx = new InitializingContext(Context, State);
		EnterRule(_localctx, 18, RULE_initializing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(INITIALIZE);
			State = 177; Match(WORKFLOW);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 178; initializing_item();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ON );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializing_itemContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(WorkflowParser.ON, 0); }
		public ITerminalNode EVENT() { return GetToken(WorkflowParser.EVENT, 0); }
		public KeyContext[] key() {
			return GetRuleContexts<KeyContext>();
		}
		public KeyContext key(int i) {
			return GetRuleContext<KeyContext>(i);
		}
		public ITerminalNode SWITCH() { return GetToken(WorkflowParser.SWITCH, 0); }
		public ITerminalNode WHEN() { return GetToken(WorkflowParser.WHEN, 0); }
		public Rule_conditionsContext rule_conditions() {
			return GetRuleContext<Rule_conditionsContext>(0);
		}
		public Initializing_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializing_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializing_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializing_itemContext initializing_item() {
		Initializing_itemContext _localctx = new Initializing_itemContext(Context, State);
		EnterRule(_localctx, 20, RULE_initializing_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(ON);
			State = 184; Match(EVENT);
			State = 185; key();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 186; Match(WHEN);
				State = 187; rule_conditions(0);
				}
			}

			State = 190; Match(SWITCH);
			State = 191; key();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_event_statementContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(WorkflowParser.ON, 0); }
		public ITerminalNode EVENT() { return GetToken(WorkflowParser.EVENT, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode EXPIRE() { return GetToken(WorkflowParser.EXPIRE, 0); }
		public ITerminalNode AFTER() { return GetToken(WorkflowParser.AFTER, 0); }
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public Switch_stateContext[] switch_state() {
			return GetRuleContexts<Switch_stateContext>();
		}
		public Switch_stateContext switch_state(int i) {
			return GetRuleContext<Switch_stateContext>(i);
		}
		public On_event_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_event_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_event_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_event_statementContext on_event_statement() {
		On_event_statementContext _localctx = new On_event_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_on_event_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				{
				State = 193; Match(ON);
				State = 194; Match(EVENT);
				State = 195; key();
				}
				break;
			case EXPIRE:
				{
				State = 196; Match(EXPIRE);
				State = 197; Match(AFTER);
				State = 198; delay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 201; switch_state();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXECUTE) | (1L << SWITCH) | (1L << STORE) | (1L << WAITING) | (1L << WHEN) | (1L << REGULAR_ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_stateContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(WorkflowParser.SWITCH, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(WorkflowParser.WHEN, 0); }
		public Rule_conditionsContext rule_conditions() {
			return GetRuleContext<Rule_conditionsContext>(0);
		}
		public Execute2Context[] execute2() {
			return GetRuleContexts<Execute2Context>();
		}
		public Execute2Context execute2(int i) {
			return GetRuleContext<Execute2Context>(i);
		}
		public Switch_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_state; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_stateContext switch_state() {
		Switch_stateContext _localctx = new Switch_stateContext(Context, State);
		EnterRule(_localctx, 24, RULE_switch_state);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 206; Match(WHEN);
				State = 207; rule_conditions(0);
				}
				break;
			}
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXECUTE) | (1L << STORE) | (1L << WAITING) | (1L << WHEN) | (1L << REGULAR_ID))) != 0)) {
					{
					{
					State = 210; execute2();
					}
					}
					State = 215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 216; Match(SWITCH);
				State = 217; key();
				}
				break;
			case 2:
				{
				State = 219;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 218; execute2();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 221;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(WorkflowParser.ON, 0); }
		public Execute2Context execute2() {
			return GetRuleContext<Execute2Context>(0);
		}
		public ITerminalNode ENTER() { return GetToken(WorkflowParser.ENTER, 0); }
		public ITerminalNode STATE() { return GetToken(WorkflowParser.STATE, 0); }
		public ITerminalNode EXIT() { return GetToken(WorkflowParser.EXIT, 0); }
		public ITerminalNode AND() { return GetToken(WorkflowParser.AND, 0); }
		public ExecuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteContext execute() {
		ExecuteContext _localctx = new ExecuteContext(Context, State);
		EnterRule(_localctx, 26, RULE_execute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(ON);
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 226; Match(ENTER);
				State = 227; Match(STATE);
				}
				break;
			case 2:
				{
				State = 228; Match(EXIT);
				State = 229; Match(STATE);
				}
				break;
			case 3:
				{
				State = 230; Match(ENTER);
				State = 231; Match(AND);
				State = 232; Match(EXIT);
				State = 233; Match(STATE);
				}
				break;
			}
			State = 236; execute2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute2Context : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(WorkflowParser.WHEN, 0); }
		public Rule_conditionsContext rule_conditions() {
			return GetRuleContext<Rule_conditionsContext>(0);
		}
		public ITerminalNode WAITING() { return GetToken(WorkflowParser.WAITING, 0); }
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public ITerminalNode BEFORE() { return GetToken(WorkflowParser.BEFORE, 0); }
		public Execute3Context[] execute3() {
			return GetRuleContexts<Execute3Context>();
		}
		public Execute3Context execute3(int i) {
			return GetRuleContext<Execute3Context>(i);
		}
		public Execute2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute2; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute2Context execute2() {
		Execute2Context _localctx = new Execute2Context(Context, State);
		EnterRule(_localctx, 28, RULE_execute2);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 238; Match(WHEN);
				State = 239; rule_conditions(0);
				}
			}

			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAITING) {
				{
				State = 242; Match(WAITING);
				State = 243; delay();
				State = 244; Match(BEFORE);
				}
			}

			State = 249;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 248; execute3();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute3Context : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(WorkflowParser.EXECUTE, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public ITerminalNode STORE() { return GetToken(WorkflowParser.STORE, 0); }
		public MatchingsContext[] matchings() {
			return GetRuleContexts<MatchingsContext>();
		}
		public MatchingsContext matchings(int i) {
			return GetRuleContext<MatchingsContext>(i);
		}
		public Execute3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute3; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute3Context execute3() {
		Execute3Context _localctx = new Execute3Context(Context, State);
		EnterRule(_localctx, 30, RULE_execute3);
		int _la;
		try {
			int _alt;
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXECUTE:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXECUTE:
					{
					State = 253; Match(EXECUTE);
					}
					break;
				case REGULAR_ID:
					{
					State = 254; key();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 257; action();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 260;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case STORE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262; Match(STORE);
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 263; matchings();
					}
					}
					State = 266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LEFT_PAREN );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchingsContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public MatchingContext[] matching() {
			return GetRuleContexts<MatchingContext>();
		}
		public MatchingContext matching(int i) {
			return GetRuleContext<MatchingContext>(i);
		}
		public MatchingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchings; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchingsContext matchings() {
		MatchingsContext _localctx = new MatchingsContext(Context, State);
		EnterRule(_localctx, 32, RULE_matchings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(LEFT_PAREN);
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 271; matching();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==REGULAR_ID );
			State = 276; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchingContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(WorkflowParser.EQUAL, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public MatchingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matching; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatching(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchingContext matching() {
		MatchingContext _localctx = new MatchingContext(Context, State);
		EnterRule(_localctx, 34, RULE_matching);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; key();
			State = 279; Match(EQUAL);
			State = 280; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 36, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; key();
			State = 283; Match(LEFT_PAREN);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REGULAR_ID) {
				{
				State = 284; arguments();
				}
			}

			State = 287; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(WorkflowParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(WorkflowParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 38, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; argument();
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 290; Match(COMMA);
				State = 291; argument();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(WorkflowParser.EQUAL, 0); }
		public ArgumentValueContext argumentValue() {
			return GetRuleContext<ArgumentValueContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 40, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; key();
			State = 298; Match(EQUAL);
			State = 299; argumentValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentValueContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public CompositekeyContext compositekey() {
			return GetRuleContext<CompositekeyContext>(0);
		}
		public ArgumentValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentValueContext argumentValue() {
		ArgumentValueContext _localctx = new ArgumentValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_argumentValue);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; @string();
				}
				break;
			case AROBASE:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; compositekey();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_conditionsContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(WorkflowParser.NOT, 0); }
		public Rule_conditionsContext[] rule_conditions() {
			return GetRuleContexts<Rule_conditionsContext>();
		}
		public Rule_conditionsContext rule_conditions(int i) {
			return GetRuleContext<Rule_conditionsContext>(i);
		}
		public ITerminalNode AND() { return GetToken(WorkflowParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(WorkflowParser.OR, 0); }
		public Rule_conditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_conditions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_conditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_conditionsContext rule_conditions() {
		return rule_conditions(0);
	}

	private Rule_conditionsContext rule_conditions(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Rule_conditionsContext _localctx = new Rule_conditionsContext(Context, _parentState);
		Rule_conditionsContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_rule_conditions, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGULAR_ID:
				{
				State = 306; key();
				State = 307; Match(LEFT_PAREN);
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REGULAR_ID) {
					{
					State = 308; arguments();
					}
				}

				State = 311; Match(RIGHT_PAREN);
				}
				break;
			case NOT:
				{
				State = 313; Match(NOT);
				State = 314; rule_conditions(4);
				}
				break;
			case LEFT_PAREN:
				{
				State = 315; Match(LEFT_PAREN);
				State = 316; rule_conditions(0);
				State = 317; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 327;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new Rule_conditionsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rule_conditions);
						State = 321;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 322; Match(AND);
						State = 323; rule_conditions(4);
						}
						break;
					case 2:
						{
						_localctx = new Rule_conditionsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_rule_conditions);
						State = 324;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 325; Match(OR);
						State = 326; rule_conditions(3);
						}
						break;
					}
					} 
				}
				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Event_declaration_statementContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(WorkflowParser.EVENT, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Event_declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declaration_statementContext event_declaration_statement() {
		Event_declaration_statementContext _localctx = new Event_declaration_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_event_declaration_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(EVENT);
			State = 333; key();
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 334; comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_declaration_statementContext : ParserRuleContext {
		public ITerminalNode ACTION() { return GetToken(WorkflowParser.ACTION, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Action_declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_declaration_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction_declaration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Action_declaration_statementContext action_declaration_statement() {
		Action_declaration_statementContext _localctx = new Action_declaration_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_action_declaration_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(ACTION);
			State = 338; key();
			State = 339; Match(LEFT_PAREN);
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL) | (1L << INTEGER) | (1L << TEXT))) != 0)) {
				{
				State = 340; parameters();
				}
			}

			State = 343; Match(RIGHT_PAREN);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 344; comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_declaration_statementContext : ParserRuleContext {
		public ITerminalNode RULE() { return GetToken(WorkflowParser.RULE, 0); }
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(WorkflowParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(WorkflowParser.RIGHT_PAREN, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Rule_declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_declaration_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_declaration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_declaration_statementContext rule_declaration_statement() {
		Rule_declaration_statementContext _localctx = new Rule_declaration_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_rule_declaration_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(RULE);
			State = 348; key();
			State = 349; Match(LEFT_PAREN);
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL) | (1L << INTEGER) | (1L << TEXT))) != 0)) {
				{
				State = 350; parameters();
				}
			}

			State = 353; Match(RIGHT_PAREN);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 354; comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(WorkflowParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(WorkflowParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; parameter();
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 358; Match(COMMA);
				State = 359; parameter();
				}
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; type();
			State = 366; key();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(WorkflowParser.TEXT, 0); }
		public ITerminalNode INTEGER() { return GetToken(WorkflowParser.INTEGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(WorkflowParser.DECIMAL, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL) | (1L << INTEGER) | (1L << TEXT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode REGULAR_ID() { return GetToken(WorkflowParser.REGULAR_ID, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 58, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(REGULAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositekeyContext : ParserRuleContext {
		public KeyContext[] key() {
			return GetRuleContexts<KeyContext>();
		}
		public KeyContext key(int i) {
			return GetRuleContext<KeyContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(WorkflowParser.DOT, 0); }
		public ITerminalNode AROBASE() { return GetToken(WorkflowParser.AROBASE, 0); }
		public CompositekeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositekey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositekey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositekeyContext compositekey() {
		CompositekeyContext _localctx = new CompositekeyContext(Context, State);
		EnterRule(_localctx, 60, RULE_compositekey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AROBASE) {
				{
				State = 372; Match(AROBASE);
				}
			}

			State = 375; key();
			{
			State = 376; Match(DOT);
			State = 377; key();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(WorkflowParser.CHAR_STRING, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 62, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(WorkflowParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 64, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(WorkflowParser.DOT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 66, RULE_numeric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; number();
			State = 384; Match(DOT);
			State = 385; number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(WorkflowParser.CHAR_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 68, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelayContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode MINUTE() { return GetToken(WorkflowParser.MINUTE, 0); }
		public ITerminalNode HOUR() { return GetToken(WorkflowParser.HOUR, 0); }
		public ITerminalNode DAY() { return GetToken(WorkflowParser.DAY, 0); }
		public DelayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delay; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowParserVisitor<TResult> typedVisitor = visitor as IWorkflowParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelayContext delay() {
		DelayContext _localctx = new DelayContext(Context, State);
		EnterRule(_localctx, 70, RULE_delay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; number();
			State = 390;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DAY) | (1L << HOUR) | (1L << MINUTE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return rule_conditions_sempred((Rule_conditionsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rule_conditions_sempred(Rule_conditionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x37', '\x18B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 'O', '\n', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'V', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', '[', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\\', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x61', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x64', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', 'j', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'm', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'q', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'u', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', 'z', '\n', '\x4', '\r', 
		'\x4', '\xE', '\x4', '{', '\x3', '\x4', '\x5', '\x4', '\x7F', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x84', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\x87', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x91', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x9A', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xA0', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xA5', '\n', '\n', '\x3', '\n', '\a', '\n', '\xA8', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xAB', '\v', '\n', '\x3', '\n', 
		'\a', '\n', '\xAE', '\n', '\n', '\f', '\n', '\xE', '\n', '\xB1', '\v', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x6', '\v', '\xB6', '\n', 
		'\v', '\r', '\v', '\xE', '\v', '\xB7', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xBF', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xCA', '\n', '\r', 
		'\x3', '\r', '\x6', '\r', '\xCD', '\n', '\r', '\r', '\r', '\xE', '\r', 
		'\xCE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xD3', '\n', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\xD6', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\xD9', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x6', 
		'\xE', '\xDE', '\n', '\xE', '\r', '\xE', '\xE', '\xE', '\xDF', '\x5', 
		'\xE', '\xE2', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xED', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xF3', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xF9', '\n', '\x10', '\x3', '\x10', '\x6', '\x10', '\xFC', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\xFD', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x102', '\n', '\x11', '\x3', '\x11', '\x6', '\x11', '\x105', 
		'\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x106', '\x3', '\x11', '\x3', 
		'\x11', '\x6', '\x11', '\x10B', '\n', '\x11', '\r', '\x11', '\xE', '\x11', 
		'\x10C', '\x5', '\x11', '\x10F', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x6', '\x12', '\x113', '\n', '\x12', '\r', '\x12', '\xE', '\x12', '\x114', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x120', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x127', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x12A', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x132', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x138', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x142', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\x14A', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x14D', '\v', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x152', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x158', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x15C', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x162', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x166', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\x16B', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\x16E', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x5', 
		' ', '\x178', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x2', '\x3', '.', '&', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', '\x2', 
		'\x4', '\x5', '\x2', '\f', '\f', '\x17', '\x17', '$', '$', '\x5', '\x2', 
		'\n', '\n', '\x14', '\x14', '\x19', '\x19', '\x2', '\x19C', '\x2', 'N', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'P', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\b', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x8B', '\x3', '\x2', '\x2', '\x2', '\f', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x95', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xB2', '\x3', '\x2', '\x2', '\x2', '\x16', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xF2', '\x3', '\x2', '\x2', '\x2', ' ', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x110', '\x3', '\x2', '\x2', '\x2', '$', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x123', '\x3', '\x2', '\x2', '\x2', '*', '\x12B', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x131', '\x3', '\x2', '\x2', '\x2', '.', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x153', '\x3', '\x2', '\x2', '\x2', '\x34', '\x15D', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x167', '\x3', '\x2', '\x2', '\x2', '\x38', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x174', '\x3', '\x2', '\x2', '\x2', '>', '\x177', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x42', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x185', '\x3', '\x2', '\x2', '\x2', 'H', '\x187', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'O', '\x5', '\x4', '\x3', '\x2', 'K', 'L', '\x5', '\x6', 
		'\x4', '\x2', 'L', 'M', '\a', '\x2', '\x2', '\x3', 'M', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'J', '\x3', '\x2', '\x2', '\x2', 'N', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'O', '\x3', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', 
		'\x13', '\x2', '\x2', 'Q', 'R', '\a', '\x1A', '\x2', '\x2', 'R', 'U', 
		'\x5', '<', '\x1F', '\x2', 'S', 'T', '\a', '\t', '\x2', '\x2', 'T', 'V', 
		'\x5', '@', '!', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', 
		'\x3', '\x2', '\x2', '\x2', 'V', 'Z', '\x3', '\x2', '\x2', '\x2', 'W', 
		'X', '\x5', '\n', '\x6', '\x2', 'X', 'Y', '\a', '.', '\x2', '\x2', 'Y', 
		'[', '\x3', '\x2', '\x2', '\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\a', '\x15', '\x2', '\x2', '_', '\x61', '\a', 
		'+', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', 
		'\x1A', '\x2', '\x2', '\x66', 'i', '\x5', '<', '\x1F', '\x2', 'g', 'h', 
		'\a', '&', '\x2', '\x2', 'h', 'j', '\x5', '\x42', '\"', '\x2', 'i', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 
		'l', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x5', '\b', '\x5', '\x2', 
		'l', 'k', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\t', '\x2', '\x2', 
		'o', 'q', '\x5', '@', '!', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '\x18', '\x2', '\x2', 's', 'u', '\x5', '\"', '\x12', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', 'y', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', '\n', '\x6', '\x2', 
		'w', 'x', '\a', '.', '\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 
		'y', 'v', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', 'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '~', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x5', '\x14', '\v', 
		'\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x85', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\x5', '\f', '\a', '\x2', '\x81', '\x82', '\a', '.', '\x2', '\x2', '\x82', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x83', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\a', '\b', '\x2', '\x2', '\x89', '\x8A', '\x5', 
		'\x42', '\"', '\x2', '\x8A', '\t', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x90', '\a', '\v', '\x2', '\x2', '\x8C', '\x91', '\x5', '\x30', '\x19', 
		'\x2', '\x8D', '\x91', '\x5', '\x34', '\x1B', '\x2', '\x8E', '\x91', '\x5', 
		'\x32', '\x1A', '\x2', '\x8F', '\x91', '\x5', '\xE', '\b', '\x2', '\x90', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\v', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\v', '\x2', '\x2', '\x93', '\x94', '\x5', '\x12', '\n', 
		'\x2', '\x94', '\r', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\a', '\x2', '\x2', '\x96', '\x97', '\x5', '<', '\x1F', '\x2', '\x97', 
		'\x99', '\x5', '\x10', '\t', '\x2', '\x98', '\x9A', '\x5', '@', '!', '\x2', 
		'\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x9B', '\xA0', 
		'\x5', '\x46', '$', '\x2', '\x9C', '\xA0', '\x5', '\x42', '\"', '\x2', 
		'\x9D', '\xA0', '\x5', 'H', '%', '\x2', '\x9E', '\xA0', '\a', '\x37', 
		'\x2', '\x2', '\x9F', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA2', '\a', '\"', '\x2', '\x2', '\xA2', '\xA4', 
		'\x5', '<', '\x1F', '\x2', '\xA3', '\xA5', '\x5', '@', '!', '\x2', '\xA4', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\x5', 
		'\x1C', '\xF', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAE', '\x5', '\x18', '\r', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', '\x16', '\x2', '\x2', '\xB3', '\xB5', '\a', 
		'*', '\x2', '\x2', '\xB4', '\xB6', '\x5', '\x16', '\f', '\x2', '\xB5', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x1D', '\x2', '\x2', '\xBA', '\xBB', '\a', '\r', '\x2', 
		'\x2', '\xBB', '\xBE', '\x5', '<', '\x1F', '\x2', '\xBC', '\xBD', '\a', 
		')', '\x2', '\x2', '\xBD', '\xBF', '\x5', '.', '\x18', '\x2', '\xBE', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'!', '\x2', '\x2', '\xC1', '\xC2', '\x5', '<', '\x1F', '\x2', '\xC2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x1D', '\x2', 
		'\x2', '\xC4', '\xC5', '\a', '\r', '\x2', '\x2', '\xC5', '\xCA', '\x5', 
		'<', '\x1F', '\x2', '\xC6', '\xC7', '\a', '\x12', '\x2', '\x2', '\xC7', 
		'\xC8', '\a', '\x4', '\x2', '\x2', '\xC8', '\xCA', '\x5', 'H', '%', '\x2', 
		'\xC9', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCD', 
		'\x5', '\x1A', '\xE', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', ')', '\x2', '\x2', '\xD1', 
		'\xD3', '\x5', '.', '\x18', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD6', '\x5', '\x1E', '\x10', '\x2', '\xD5', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '!', '\x2', 
		'\x2', '\xDB', '\xE2', '\x5', '<', '\x1F', '\x2', '\xDC', '\xDE', '\x5', 
		'\x1E', '\x10', '\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xEC', '\a', '\x1D', '\x2', '\x2', '\xE4', '\xE5', '\a', 
		'\xF', '\x2', '\x2', '\xE5', '\xED', '\a', '\"', '\x2', '\x2', '\xE6', 
		'\xE7', '\a', '\x11', '\x2', '\x2', '\xE7', '\xED', '\a', '\"', '\x2', 
		'\x2', '\xE8', '\xE9', '\a', '\xF', '\x2', '\x2', '\xE9', '\xEA', '\a', 
		'\x5', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x11', '\x2', '\x2', '\xEB', 
		'\xED', '\a', '\"', '\x2', '\x2', '\xEC', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\x5', '\x1E', '\x10', '\x2', '\xEF', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\a', ')', '\x2', '\x2', '\xF1', '\xF3', '\x5', 
		'.', '\x18', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\a', '\'', '\x2', '\x2', '\xF5', '\xF6', '\x5', 
		'H', '%', '\x2', '\xF6', '\xF7', '\a', '\x6', '\x2', '\x2', '\xF7', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFC', '\x5', ' ', '\x11', '\x2', '\xFB', '\xFA', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', 
		'\a', '\xE', '\x2', '\x2', '\x100', '\x102', '\x5', '<', '\x1F', '\x2', 
		'\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x104', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x105', '\x5', '&', '\x14', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10A', '\a', 
		'#', '\x2', '\x2', '\x109', '\x10B', '\x5', '\"', '\x12', '\x2', '\x10A', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x101', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '!', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x112', '\a', ',', '\x2', '\x2', '\x111', '\x113', '\x5', '$', '\x13', 
		'\x2', '\x112', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\a', '-', '\x2', '\x2', '\x117', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x5', '<', '\x1F', 
		'\x2', '\x119', '\x11A', '\a', '\x10', '\x2', '\x2', '\x11A', '\x11B', 
		'\x5', '\x46', '$', '\x2', '\x11B', '%', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11D', '\x5', '<', '\x1F', '\x2', '\x11D', '\x11F', '\a', ',', '\x2', 
		'\x2', '\x11E', '\x120', '\x5', '(', '\x15', '\x2', '\x11F', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\a', 
		'-', '\x2', '\x2', '\x122', '\'', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x128', '\x5', '*', '\x16', '\x2', '\x124', '\x125', '\a', '\x30', '\x2', 
		'\x2', '\x125', '\x127', '\x5', '*', '\x16', '\x2', '\x126', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x129', ')', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x5', '<', '\x1F', 
		'\x2', '\x12C', '\x12D', '\a', '\x10', '\x2', '\x2', '\x12D', '\x12E', 
		'\x5', ',', '\x17', '\x2', '\x12E', '+', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x132', '\x5', '\x46', '$', '\x2', '\x130', '\x132', '\x5', '>', ' ', 
		'\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x131', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x134', '\b', '\x18', '\x1', '\x2', '\x134', '\x135', '\x5', 
		'<', '\x1F', '\x2', '\x135', '\x137', '\a', ',', '\x2', '\x2', '\x136', 
		'\x138', '\x5', '(', '\x15', '\x2', '\x137', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\a', '-', '\x2', '\x2', 
		'\x13A', '\x142', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\a', 
		'\x1C', '\x2', '\x2', '\x13C', '\x142', '\x5', '.', '\x18', '\x6', '\x13D', 
		'\x13E', '\a', ',', '\x2', '\x2', '\x13E', '\x13F', '\x5', '.', '\x18', 
		'\x2', '\x13F', '\x140', '\a', '-', '\x2', '\x2', '\x140', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x133', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', 
		'\f', '\x5', '\x2', '\x2', '\x144', '\x145', '\a', '\x5', '\x2', '\x2', 
		'\x145', '\x14A', '\x5', '.', '\x18', '\x6', '\x146', '\x147', '\f', '\x4', 
		'\x2', '\x2', '\x147', '\x148', '\a', '\x1E', '\x2', '\x2', '\x148', '\x14A', 
		'\x5', '.', '\x18', '\x5', '\x149', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x146', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', 
		'\a', '\r', '\x2', '\x2', '\x14F', '\x151', '\x5', '<', '\x1F', '\x2', 
		'\x150', '\x152', '\x5', '@', '!', '\x2', '\x151', '\x150', '\x3', '\x2', 
		'\x2', '\x2', '\x151', '\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', '\x3', '\x2', '\x2', 
		'\x154', '\x155', '\x5', '<', '\x1F', '\x2', '\x155', '\x157', '\a', ',', 
		'\x2', '\x2', '\x156', '\x158', '\x5', '\x36', '\x1C', '\x2', '\x157', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15B', 
		'\a', '-', '\x2', '\x2', '\x15A', '\x15C', '\x5', '@', '!', '\x2', '\x15B', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x33', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\a', ' ', '\x2', '\x2', '\x15E', '\x15F', '\x5', '<', '\x1F', '\x2', 
		'\x15F', '\x161', '\a', ',', '\x2', '\x2', '\x160', '\x162', '\x5', '\x36', 
		'\x1C', '\x2', '\x161', '\x160', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x165', '\a', '-', '\x2', '\x2', '\x164', '\x166', '\x5', 
		'@', '!', '\x2', '\x165', '\x164', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x16C', '\x5', '\x38', '\x1D', '\x2', '\x168', '\x169', 
		'\a', '\x30', '\x2', '\x2', '\x169', '\x16B', '\x5', '\x38', '\x1D', '\x2', 
		'\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16D', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', 
		'\x5', ':', '\x1E', '\x2', '\x170', '\x171', '\x5', '<', '\x1F', '\x2', 
		'\x171', '\x39', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\t', '\x2', 
		'\x2', '\x2', '\x173', ';', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', 
		'\a', '\x37', '\x2', '\x2', '\x175', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x178', '\a', '\x32', '\x2', '\x2', '\x177', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x178', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x5', '<', '\x1F', 
		'\x2', '\x17A', '\x17B', '\a', '\x31', '\x2', '\x2', '\x17B', '\x17C', 
		'\x5', '<', '\x1F', '\x2', '\x17C', '?', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17E', '\a', '+', '\x2', '\x2', '\x17E', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x180', '\a', '\x34', '\x2', '\x2', '\x180', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\x5', '\x42', '\"', '\x2', 
		'\x182', '\x183', '\a', '\x31', '\x2', '\x2', '\x183', '\x184', '\x5', 
		'\x42', '\"', '\x2', '\x184', '\x45', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x186', '\a', '+', '\x2', '\x2', '\x186', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x188', '\x5', '\x42', '\"', '\x2', '\x188', '\x189', '\t', 
		'\x3', '\x2', '\x2', '\x189', 'I', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'N', 'U', '\\', '\x62', 'i', 'l', 'p', 't', '{', '~', '\x85', '\x90', 
		'\x99', '\x9F', '\xA4', '\xA9', '\xAF', '\xB7', '\xBE', '\xC9', '\xCE', 
		'\xD2', '\xD7', '\xDF', '\xE1', '\xEC', '\xF2', '\xF8', '\xFD', '\x101', 
		'\x106', '\x10C', '\x10E', '\x114', '\x11F', '\x128', '\x131', '\x137', 
		'\x141', '\x149', '\x14B', '\x151', '\x157', '\x15B', '\x161', '\x165', 
		'\x16C', '\x177',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Workflows.Parser
